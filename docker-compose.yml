services:
  rabbitmq:
    image: rabbitmq:3-management
    ports:
      - "5672:5672"
      - "15672:15672"
    restart: unless-stopped
    healthcheck:
      test: [ "CMD", "rabbitmqctl", "status" ]
      interval: 10s
      retries: 5
  
  postgres:
    image: postgres:latest
    container_name: postgres_db
    environment:
      POSTGRES_DB: defaultdb
      POSTGRES_USER: avnadmin
      POSTGRES_PASSWORD: AVNS_wV3mour-_TLqRKYrbRb
    ports:
      - "5432:5432"
    restart: unless-stopped
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init-db.sql:/docker-entrypoint-initdb.d/init.sql
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U avnadmin" ]
      interval: 10s
      retries: 5

  cleaner_service:
    build:
      context: .
      dockerfile: CleanerService/Dockerfile
    deploy:
      replicas: 3
    depends_on:
      rabbitmq:
        condition: service_healthy
    environment:
      - RABBITMQ_HOST=rabbitmq
    restart: unless-stopped
    ports:
      - "8087:8080"

  indexer_service:
    build:
      context: .
      dockerfile: IndexerService/Dockerfile
    deploy:
      replicas: 3
    depends_on:
      rabbitmq:
        condition: service_healthy
      postgres:
        condition: service_healthy
    environment:
      - RABBITMQ_HOST=rabbitmq
      - POSTGRES_HOST=postgres
      - POSTGRES_PORT=5432
    restart: unless-stopped
    ports:
      - "8088:8080"

  search_api:
    build:
      context: .
      dockerfile: SearchAPI/Dockerfile
    deploy:
      replicas: 3
    depends_on:
      postgres:
        condition: service_healthy
    environment:
      - POSTGRES_HOST=postgres
      - POSTGRES_PORT=5432
    restart: unless-stopped
    ports:
      - "8095:8080"
      - "8096:8081"
      - "8097:8082"

  seq:
    image: datalust/seq:latest
    container_name: seq
    environment:
      ACCEPT_EULA: "Y"
    ports:
      - "5341:80"
    restart: unless-stopped
    

  zipkin:
    image: openzipkin/zipkin
    container_name: zipkin
    ports:
      - "9411:9411"
    restart: unless-stopped
    
  
  prometheus:
    image: prom/prometheus:latest
    container_name: prometheus
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml
    ports:
      - "9090:9090"
    restart: unless-stopped
    depends_on:
      - cleaner_service
      - indexer_service
      - search_api

  grafana:
    image: grafana/grafana:latest
    container_name: grafana
    ports:
      - "3000:3000"
    restart: unless-stopped
    depends_on:
      - prometheus


  nginx:
    image: nginx:latest
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf
    ports:
      - "80:80"
    depends_on:
      search_api:
        condition: service_started
  
  postgres_shard_1:
    image: postgres:latest
    container_name: postgres_shard_1
    environment:
      POSTGRES_DB: shard1db
      POSTGRES_USER: avnadmin
      POSTGRES_PASSWORD: AVNS_wV3mour-_TLqRKYrbRb
    ports:
      - "5435:5432"
    restart: unless-stopped
    volumes:
      - postgres_shard1_data:/var/lib/postgresql/data
      - ./init-db.sql:/docker-entrypoint-initdb.d/init.sql
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U avnadmin" ]
      interval: 10s
      retries: 5
  
  postgres_shard_2:
    image: postgres:latest
    container_name: postgres_shard_2
    environment:
      POSTGRES_DB: shard2db
      POSTGRES_USER: avnadmin
      POSTGRES_PASSWORD: AVNS_wV3mour-_TLqRKYrbRb
    ports:
      - "5436:5432"
    restart: unless-stopped
    volumes:
      - postgres_shard2_data:/var/lib/postgresql/data
      - ./init-db.sql:/docker-entrypoint-initdb.d/init.sql
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U avnadmin" ]
      interval: 10s
      retries: 5


volumes:
  postgres_data:
  postgres_shard1_data:
  postgres_shard2_data:



















